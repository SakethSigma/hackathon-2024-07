###thought
"""
Lets think step by step... I need to verify whether patient_name and hospital_name are present in discharge_summary:
Steps I will take:
    a. Verify patient_name, hospital_name in discharge_summary: validate_info_node
    b. Extract hospital_name from discharge_summary: info_extract_node
I can perform them sequentially using the StateGraph
"""

###python
class AgentState(TypedDict):
    bills: str  # base64 img
    receipts: str  # base64 img
    discharge_summary: str  # base64 img
    lab_report: str  # base64 img
    patient_id: str
    insurer_name: str
    patient_name: str
    policy_start_date: str
    policy_end_date: str
    policy_no: str
    claim_limit: str
    policy_active: bool
    patient_name_hospital_name_present: bool    
    hospital_name: str

def extraction_tasks(result):
    builder = StateGraph(AgentState)
    """
    I need to extract the following details:
        Patient Name: db_sql_node
        Policy Start Date: db_sql_node
        Policy End Date: db_sql_node
        Policy Claim Limit: db_sql_node
        Policy Number: db_sql_node

    I can perform them sequentially using the StateGraph
    """

    name_db_lookup = functools.partial(db_sql_node, information_required="patient_name", details=f"patient_id {state.get('patient_id')}")
    policy_start_db_lookup = functools.partial(db_sql_node, information_required="policy_start_date", details=f"patient_id {state.get('patient_id')}")
    policy_end_db_lookup = functools.partial(db_sql_node, information_required="policy_end_date", details=f"patient_id {state.get('patient_id')}")
    policy_no_db_lookup = functools.partial(db_sql_node, information_required="policy_no", details=f"patient_id {state.get('patient_id')}")
    claim_limit_db_lookup = functools.partial(db_sql_node, information_required="claim_limit", details=f"patient_id {state.get('patient_id')}")
    policy_active_db_lookup = functools.partial(db_sql_node, information_required="policy_active", details=f"patient_id {state.get('patient_id')}")


    builder.add_node("name_db_lookup", name_db_lookup)
    builder.add_node("policy_start_db_lookup", policy_start_db_lookup)
    builder.add_node("policy_end_db_lookup", policy_end_db_lookup)
    builder.add_node("policy_no_db_lookup", policy_no_db_lookup)
    builder.add_node("claim_limit_db_lookup", claim_limit_db_lookup)
    builder.add_node("policy_active_db_lookup", policy_active_db_lookup)

    builder.add_edge("name_db_lookup", "policy_start_db_lookup")
    builder.add_edge("policy_start_db_lookup", "policy_end_db_lookup")

    builder.add_edge("policy_end_db_lookup", "policy_no_db_lookup")
    builder.add_edge("policy_no_db_lookup", "claim_limit_db_lookup")
    builder.add_edge("claim_limit_db_lookup", "policy_active_db_lookup")
    builder.add_edge("policy_active_db_lookup", END)
    builder.set_entry_point("name_db_lookup")
    graph = builder.compile()
    graph.get_graph().draw_png("samples/step.png")
    result = graph.invoke(result)
    return result


